name: Push image to Amazon ECR and deploy to ECS


on:
  push:
    branches:
      - timeapp


jobs:
  deploy:
    runs-on: ubuntu-latest


    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS Credentials       
        run:
          aws sts get-caller-identity

      # - name: Create S3 Bucket
      #   run: aws s3api create-bucket --bucket karthik-s3-teammanagementapp --region ${{ secrets.AWS_REGION }}


      # - name: Create ECR Repository
      #   run: aws ecr create-repository --repository-name time-management-app

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2.0.1
        id: login-ecr


      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT


      - name: Build, tag and Push image to Amazon ECR
        id: build-and-tag-docker-image
        # working-directory: ./app
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.7.5
        


      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check -diff
      #   # continue-on-error: true


      - name: Terraform Init
        id: init
        working-directory: ./terraform
        run: terraform init
      #   # continue-on-error: true


      - name: Terraform Validate
        id: validate
        working-directory: ./terraform
        run: terraform validate
      #   # continue-on-error: true

      # - name: Terraform destroy
      #   id: destroy
      #   working-directory: ./terraform
      #   run: terraform destroy -auto-approve
      #   # continue-on-error: true 


      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: terraform plan
      # #   # continue-on-error: true  

      - name: Terraform apply
        id: apply
        working-directory: ./terraform
      # #   # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
      # #   # working-directory: ${{ env.working-directory }}  